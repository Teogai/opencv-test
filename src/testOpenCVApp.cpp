#include "cinder/app/AppNative.h"
#include "cinder/gl/gl.h"
#include "cinder/ImageIo.h"
#include "cinder/gl/Texture.h"
#include "cinder/Capture.h"

#include "CinderOpenCv.h"

using namespace ci;
using namespace ci::app;
using namespace cv;

Mat fgMaskMOG; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG;

static const int WIDTH = 640, HEIGHT = 480;

class testOpenCVApp : public AppNative {
  public:
	void setup();
	void keyDown(KeyEvent event);
	void update();
	void draw();
	void removeGreen(const Mat& myImage, const Mat& Background, Mat& Result);
	void invisGreen(const Mat& myImage, Mat& Result);
	void playRec(const Mat& myImage, Mat& Result);
	void sharpen(const Mat& myImage, Mat& Result);
	
	CaptureRef		mCapture;
	gl::Texture		mTexture;
	cv::Mat			bgImage;

	vector<cv::Mat> vRec;
	bool isRecording = false;
	bool isPlaying = false;
	int playIndex = 0;
};

void testOpenCVApp::setup()
{
	// The included image is copyright Trey Ratcliff
	// http://www.flickr.com/photos/stuckincustoms/4045813826/

	//bgImage = loadImage(loadAsset("dfw.jpg"));

	//init camera
	try {
		mCapture = Capture::create(WIDTH, HEIGHT, Capture::findDeviceByNameContains("Logitech"));
		mCapture->start();
	}
	catch (...) {
		console() << "Failed to initialize capture" << std::endl;
	}
	bgImage = toOcv(mCapture->getSurface());
}

void testOpenCVApp::keyDown(KeyEvent event) {
	if (event.getChar() == '1'){
		bgImage = toOcv(mCapture->getSurface());
	}
	else if (event.getChar() == '2'){
		vRec.clear();
		isRecording = true;
	}
	else if (event.getChar() == '3'){
		isRecording = false;
	}
	else if (event.getChar() == '4'){
		if (vRec.size() > 0) {
			playIndex = 0;
			isPlaying = true;
		}
	}
	else if (event.getChar() == '5'){
		isPlaying = false;
	}
}

void testOpenCVApp::update()
{
	//mTexture = gl::Texture::create(mCapture->getSurface());
	Mat input = toOcv(mCapture->getSurface());
	//Mat bg = toOcv(bgImage);
	Mat output;

	playRec(input, output);
	//invisGreen(input, output);
	//removeGreen(input, bg, output);
	//sharpen(input, output)
	mTexture = gl::Texture( fromOcv( output ) );

	if (isRecording) {
		vRec.push_back(input);
	}
	if (isPlaying) {
		playIndex++;
		if (playIndex == vRec.size()) playIndex = 0;
	}
}

void testOpenCVApp::draw()
{
	gl::clear(Color(0.0f, 0.0f, 0.0f));
	gl::setMatricesWindow(getWindowWidth(), getWindowHeight());
	gl::draw(mTexture);
}

void testOpenCVApp::removeGreen(const Mat& myImage, const Mat& Background, Mat& Result)
{
	int count = 0;
	Result.create(myImage.size(), myImage.type());

	for (int j = 0; j < myImage.rows; ++j)
	{
		for (int i = 0; i < myImage.cols; ++i)
		{
			cv::Vec3b color = myImage.at<cv::Vec3b>(j, i);
			int b = color[0], g = color[1], r = color[2];
			if (g + g - r - b > 40){
				Result.at<cv::Vec3b>(j, i) = Background.at<cv::Vec3b>(j, i);
				count++;
			}
			else {
				Result.at<cv::Vec3b>(j, i) = myImage.at<cv::Vec3b>(j, i);
			}
		}
	}
}

void testOpenCVApp::invisGreen(const Mat& myImage, Mat& Result)
{
	Result.create(myImage.size(), myImage.type());

	for (int j = 0; j < myImage.rows; ++j)
	{
		for (int i = 0; i < myImage.cols; ++i)
		{
			cv::Vec3b color = myImage.at<cv::Vec3b>(j, i);
			int b = color[0], g = color[1], r = color[2];
			if (g + g - r - b > 40){
				Result.at<cv::Vec3b>(j, i) = myImage.at<cv::Vec3b>(j, i);
			}
			else {
				Result.at<cv::Vec3b>(j, i) = bgImage.at<cv::Vec3b>(j, i);
			}
		}
	}
}

void testOpenCVApp::playRec(const Mat& myImage, Mat& Result)
{
	Result.create(myImage.size(), myImage.type());

	for (int j = 0; j < myImage.rows; ++j)
	{
		for (int i = 0; i < myImage.cols; ++i)
		{
			cv::Vec3b color;
			if (isPlaying) {
				color = vRec[playIndex].at<cv::Vec3b>(j, i);
				int b = color[0], g = color[1], r = color[2];
				if (g + g - r - b > 40){
					Result.at<cv::Vec3b>(j, i) = myImage.at<cv::Vec3b>(j, i);
				}
				else {
					Result.at<cv::Vec3b>(j, i) = vRec[playIndex].at<cv::Vec3b>(j, i);
				}
			}
			else{
				Result.at<cv::Vec3b>(j, i) = myImage.at<cv::Vec3b>(j, i);
			}
		}
	}
}

void testOpenCVApp::sharpen(const Mat& myImage, Mat& Result)
{
	CV_Assert(myImage.depth() == CV_8U);

	Result.create(myImage.size(), myImage.type());
	const int nChannels = myImage.channels();

	for (int j = 1; j < myImage.rows - 1; ++j)
	{
		const uchar* previous = myImage.ptr<uchar>(j - 1);
		const uchar* current = myImage.ptr<uchar>(j);
		const uchar* next = myImage.ptr<uchar>(j + 1);

		uchar* output = Result.ptr(j);

		for (int i = nChannels; i < nChannels * (myImage.cols - 1); ++i)
		{
			*output++ = saturate_cast<uchar>(5 * current[i]
				- current[i - nChannels] - current[i + nChannels] - previous[i] - next[i]);
		}
	}

	Result.row(0).setTo(Scalar(0));
	Result.row(Result.rows - 1).setTo(Scalar(0));
	Result.col(0).setTo(Scalar(0));
	Result.col(Result.cols - 1).setTo(Scalar(0)); 

}
CINDER_APP_NATIVE( testOpenCVApp, RendererGl )
